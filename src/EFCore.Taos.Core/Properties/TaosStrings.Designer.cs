// <auto-generated />

using System;
using System.Reflection;
using System.Resources;
using System.Threading;
using JetBrains.Annotations;
using Microsoft.EntityFrameworkCore.Diagnostics;
using Microsoft.Extensions.Logging;

namespace Maikebing.EntityFrameworkCore.Taos.Internal
{
    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static class TaosStrings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Maikebing.EntityFrameworkCore.Taos.Properties.TaosStrings", typeof(TaosStrings).GetTypeInfo().Assembly);

        /// <summary>
        ///     Taos does not support this migration operation ('{operation}'). For more information, see http://go.microsoft.com/fwlink/?LinkId=723262.
        /// </summary>
        public static string InvalidMigrationOperation([CanBeNull] object operation)
            => string.Format(
                GetString("InvalidMigrationOperation", nameof(operation)),
                operation);

        /// <summary>
        ///     Generating idempotent scripts for migration is not currently supported by Taos. For more information, see http://go.microsoft.com/fwlink/?LinkId=723262.
        /// </summary>
        public static string MigrationScriptGenerationNotSupported
            => GetString("MigrationScriptGenerationNotSupported");

        /// <summary>
        ///     Taos does not support sequences. For more information, see http://go.microsoft.com/fwlink/?LinkId=723262.
        /// </summary>
        public static string SequencesNotSupported
            => GetString("SequencesNotSupported");

        /// <summary>
        ///     Taos doesn't support computed columns. For more information, see http://go.microsoft.com/fwlink/?LinkId=723262.
        /// </summary>
        public static string ComputedColumnsNotSupported
            => GetString("ComputedColumnsNotSupported");

        /// <summary>
        ///     Taos cannot order by expressions of type '{type}'. Convert the values to a supported type or use LINQ to Objects to order the results.
        /// </summary>
        public static string OrderByNotSupported([CanBeNull] object type)
            => string.Format(
                GetString("OrderByNotSupported", nameof(type)),
                type);

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);
            for (var i = 0; i < formatterNames.Length; i++)
            {
                value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
            }

            return value;
        }
    }
}

namespace Maikebing.EntityFrameworkCore.Taos.Internal
{
    /// <summary>
    ///     This is an internal API that supports the Entity Framework Core infrastructure and not subject to
    ///     the same compatibility standards as public APIs. It may be changed or removed without notice in
    ///     any release. You should only use it directly in your code with extreme caution and knowing that
    ///     doing so can result in application failures when updating to a new Entity Framework Core release.
    /// </summary>
    public static class TaosResources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Maikebing.EntityFrameworkCore.Taos.Properties.TaosStrings", typeof(TaosResources).GetTypeInfo().Assembly);

        /// <summary>
        ///     The entity type '{entityType}' is configured to use schema '{schema}'. Taos does not support schemas. This configuration will be ignored by the Taos provider.
        /// </summary>
        public static EventDefinition<string, string> LogSchemaConfigured([NotNull] IDiagnosticsLogger logger)
        {
            var definition = ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogSchemaConfigured;
            if (definition == null)
            {
                definition = LazyInitializer.EnsureInitialized<EventDefinitionBase>(
                    ref ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogSchemaConfigured,
                    () => new EventDefinition<string, string>(
                        logger.Options,
                        TaosEventId.SchemaConfiguredWarning,
                        LogLevel.Warning,
                        "TaosEventId.SchemaConfiguredWarning",
                        level => LoggerMessage.Define<string, string>(
                            level,
                            TaosEventId.SchemaConfiguredWarning,
                            _resourceManager.GetString("LogSchemaConfigured"))));
            }

            return (EventDefinition<string, string>)definition;
        }

        /// <summary>
        ///     The model was configured with the database sequence '{sequence}'. Taos does not support sequences.
        /// </summary>
        public static EventDefinition<string> LogSequenceConfigured([NotNull] IDiagnosticsLogger logger)
        {
            var definition = ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogSequenceConfigured;
            if (definition == null)
            {
                definition = LazyInitializer.EnsureInitialized<EventDefinitionBase>(
                    ref ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogSequenceConfigured,
                    () => new EventDefinition<string>(
                        logger.Options,
                        TaosEventId.SequenceConfiguredWarning,
                        LogLevel.Warning,
                        "TaosEventId.SequenceConfiguredWarning",
                        level => LoggerMessage.Define<string>(
                            level,
                            TaosEventId.SequenceConfiguredWarning,
                            _resourceManager.GetString("LogSequenceConfigured"))));
            }

            return (EventDefinition<string>)definition;
        }

        /// <summary>
        ///     Taos doesn't support schemas. The specified schema selection arguments will be ignored.
        /// </summary>
        public static EventDefinition LogUsingSchemaSelectionsWarning([NotNull] IDiagnosticsLogger logger)
        {
            var definition = ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogUsingSchemaSelectionsWarning;
            if (definition == null)
            {
                definition = LazyInitializer.EnsureInitialized<EventDefinitionBase>(
                    ref ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogUsingSchemaSelectionsWarning,
                    () => new EventDefinition(
                        logger.Options,
                        TaosEventId.SchemasNotSupportedWarning,
                        LogLevel.Warning,
                        "TaosEventId.SchemasNotSupportedWarning",
                        level => LoggerMessage.Define(
                            level,
                            TaosEventId.SchemasNotSupportedWarning,
                            _resourceManager.GetString("LogUsingSchemaSelectionsWarning"))));
            }

            return (EventDefinition)definition;
        }

        /// <summary>
        ///     Found column on table: {tableName}, column name: {columnName}, data type: {dataType}, not nullable: {isNotNullable}, default value: {defaultValue}.
        /// </summary>
        public static EventDefinition<string, string, string, bool, string> LogFoundColumn([NotNull] IDiagnosticsLogger logger)
        {
            var definition = ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogFoundColumn;
            if (definition == null)
            {
                definition = LazyInitializer.EnsureInitialized<EventDefinitionBase>(
                    ref ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogFoundColumn,
                    () => new EventDefinition<string, string, string, bool, string>(
                        logger.Options,
                        TaosEventId.ColumnFound,
                        LogLevel.Debug,
                        "TaosEventId.ColumnFound",
                        level => LoggerMessage.Define<string, string, string, bool, string>(
                            level,
                            TaosEventId.ColumnFound,
                            _resourceManager.GetString("LogFoundColumn"))));
            }

            return (EventDefinition<string, string, string, bool, string>)definition;
        }

        /// <summary>
        ///     Found foreign key on table: {tableName}, id: {id}, principal table: {principalTableName}, delete action: {deleteAction}.
        /// </summary>
        public static EventDefinition<string, long, string, string> LogFoundForeignKey([NotNull] IDiagnosticsLogger logger)
        {
            var definition = ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogFoundForeignKey;
            if (definition == null)
            {
                definition = LazyInitializer.EnsureInitialized<EventDefinitionBase>(
                    ref ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogFoundForeignKey,
                    () => new EventDefinition<string, long, string, string>(
                        logger.Options,
                        TaosEventId.ForeignKeyFound,
                        LogLevel.Debug,
                        "TaosEventId.ForeignKeyFound",
                        level => LoggerMessage.Define<string, long, string, string>(
                            level,
                            TaosEventId.ForeignKeyFound,
                            _resourceManager.GetString("LogFoundForeignKey"))));
            }

            return (EventDefinition<string, long, string, string>)definition;
        }

        /// <summary>
        ///     Could not scaffold the foreign key '{foreignKeyName}'. The referenced table could not be found. This most likely occurred because the referenced table was excluded from scaffolding.
        /// </summary>
        public static EventDefinition<string> LogForeignKeyScaffoldErrorPrincipalTableNotFound([NotNull] IDiagnosticsLogger logger)
        {
            var definition = ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogForeignKeyScaffoldErrorPrincipalTableNotFound;
            if (definition == null)
            {
                definition = LazyInitializer.EnsureInitialized<EventDefinitionBase>(
                    ref ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogForeignKeyScaffoldErrorPrincipalTableNotFound,
                    () => new EventDefinition<string>(
                        logger.Options,
                        TaosEventId.ForeignKeyReferencesMissingTableWarning,
                        LogLevel.Warning,
                        "TaosEventId.ForeignKeyReferencesMissingTableWarning",
                        level => LoggerMessage.Define<string>(
                            level,
                            TaosEventId.ForeignKeyReferencesMissingTableWarning,
                            _resourceManager.GetString("LogForeignKeyScaffoldErrorPrincipalTableNotFound"))));
            }

            return (EventDefinition<string>)definition;
        }

        /// <summary>
        ///     Found table with name: {name}.
        /// </summary>
        public static EventDefinition<string> LogFoundTable([NotNull] IDiagnosticsLogger logger)
        {
            var definition = ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogFoundTable;
            if (definition == null)
            {
                definition = LazyInitializer.EnsureInitialized<EventDefinitionBase>(
                    ref ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogFoundTable,
                    () => new EventDefinition<string>(
                        logger.Options,
                        TaosEventId.TableFound,
                        LogLevel.Debug,
                        "TaosEventId.TableFound",
                        level => LoggerMessage.Define<string>(
                            level,
                            TaosEventId.TableFound,
                            _resourceManager.GetString("LogFoundTable"))));
            }

            return (EventDefinition<string>)definition;
        }

        /// <summary>
        ///     Unable to find a table in the database matching the selected table {table}.
        /// </summary>
        public static EventDefinition<string> LogMissingTable([NotNull] IDiagnosticsLogger logger)
        {
            var definition = ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogMissingTable;
            if (definition == null)
            {
                definition = LazyInitializer.EnsureInitialized<EventDefinitionBase>(
                    ref ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogMissingTable,
                    () => new EventDefinition<string>(
                        logger.Options,
                        TaosEventId.MissingTableWarning,
                        LogLevel.Warning,
                        "TaosEventId.MissingTableWarning",
                        level => LoggerMessage.Define<string>(
                            level,
                            TaosEventId.MissingTableWarning,
                            _resourceManager.GetString("LogMissingTable"))));
            }

            return (EventDefinition<string>)definition;
        }

        /// <summary>
        ///     For foreign key with identity {id} on table {tableName}, unable to find the column called {principalColumnName} on the foreign key's principal table, {principaltableName}. Skipping foreign key.
        /// </summary>
        public static EventDefinition<string, string, string, string> LogPrincipalColumnNotFound([NotNull] IDiagnosticsLogger logger)
        {
            var definition = ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogPrincipalColumnNotFound;
            if (definition == null)
            {
                definition = LazyInitializer.EnsureInitialized<EventDefinitionBase>(
                    ref ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogPrincipalColumnNotFound,
                    () => new EventDefinition<string, string, string, string>(
                        logger.Options,
                        TaosEventId.ForeignKeyPrincipalColumnMissingWarning,
                        LogLevel.Warning,
                        "TaosEventId.ForeignKeyPrincipalColumnMissingWarning",
                        level => LoggerMessage.Define<string, string, string, string>(
                            level,
                            TaosEventId.ForeignKeyPrincipalColumnMissingWarning,
                            _resourceManager.GetString("LogPrincipalColumnNotFound"))));
            }

            return (EventDefinition<string, string, string, string>)definition;
        }

        /// <summary>
        ///     Found index with name: {indexName}, table: {tableName}, is unique: {isUnique}.
        /// </summary>
        public static EventDefinition<string, string, bool?> LogFoundIndex([NotNull] IDiagnosticsLogger logger)
        {
            var definition = ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogFoundIndex;
            if (definition == null)
            {
                definition = LazyInitializer.EnsureInitialized<EventDefinitionBase>(
                    ref ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogFoundIndex,
                    () => new EventDefinition<string, string, bool?>(
                        logger.Options,
                        TaosEventId.IndexFound,
                        LogLevel.Debug,
                        "TaosEventId.IndexFound",
                        level => LoggerMessage.Define<string, string, bool?>(
                            level,
                            TaosEventId.IndexFound,
                            _resourceManager.GetString("LogFoundIndex"))));
            }

            return (EventDefinition<string, string, bool?>)definition;
        }

        /// <summary>
        ///     Found primary key with name: {primaryKeyName}, table: {tableName}.
        /// </summary>
        public static EventDefinition<string, string> LogFoundPrimaryKey([NotNull] IDiagnosticsLogger logger)
        {
            var definition = ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogFoundPrimaryKey;
            if (definition == null)
            {
                definition = LazyInitializer.EnsureInitialized<EventDefinitionBase>(
                    ref ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogFoundPrimaryKey,
                    () => new EventDefinition<string, string>(
                        logger.Options,
                        TaosEventId.PrimaryKeyFound,
                        LogLevel.Debug,
                        "TaosEventId.PrimaryKeyFound",
                        level => LoggerMessage.Define<string, string>(
                            level,
                            TaosEventId.PrimaryKeyFound,
                            _resourceManager.GetString("LogFoundPrimaryKey"))));
            }

            return (EventDefinition<string, string>)definition;
        }

        /// <summary>
        ///     Found unique constraint with name: {uniqueConstraintName}, table: {tableName}.
        /// </summary>
        public static EventDefinition<string, string> LogFoundUniqueConstraint([NotNull] IDiagnosticsLogger logger)
        {
            var definition = ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogFoundUniqueConstraint;
            if (definition == null)
            {
                definition = LazyInitializer.EnsureInitialized<EventDefinitionBase>(
                    ref ((Diagnostics.Internal.TaosLoggingDefinitions)logger.Definitions).LogFoundUniqueConstraint,
                    () => new EventDefinition<string, string>(
                        logger.Options,
                        TaosEventId.UniqueConstraintFound,
                        LogLevel.Debug,
                        "TaosEventId.UniqueConstraintFound",
                        level => LoggerMessage.Define<string, string>(
                            level,
                            TaosEventId.UniqueConstraintFound,
                            _resourceManager.GetString("LogFoundUniqueConstraint"))));
            }

            return (EventDefinition<string, string>)definition;
        }
    }
}
